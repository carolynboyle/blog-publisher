# requirements.txt
Flask==2.3.3
Flask-SQLAlchemy==3.0.5
requests==2.31.0
google-auth==2.23.3
google-auth-oauthlib==1.0.0
google-auth-httplib2==0.1.1
google-api-python-client==2.103.0

# README.md
# Blog Publisher

A Flask application for creating and publishing blog posts to Blogger and WordPress platforms with a rich text editor and tag management system.

## Features

- üìù Rich text editor with insertable tools
- üè∑Ô∏è Smart tag and category management with autocomplete
- üì± Responsive design with Bootstrap
- üîÑ Auto-save functionality
- üìä WordPress REST API integration
- üîó Google Blogger API support (OAuth required)
- üíæ Local SQLite database storage
- üîß Easy configuration through settings panel

## Quick Start

1. **Clone the repository:**
```bash
git clone https://github.com/carolynboyle/blog-publisher.git
cd blog-publisher
```

2. **Install dependencies:**
```bash
pip install -r requirements.txt
```

3. **Run the application:**
```bash
python app.py
```

4. **Open your browser and go to:** `http://localhost:5000`

5. **Complete the setup wizard** on first run to configure your blog platform

## Configuration

### WordPress Setup
- Enter your WordPress site URL
- Provide your WordPress username and password
- Ensure your WordPress site supports REST API (most modern installations do)

### Blogger Setup
- Create a project in Google Cloud Console
- Enable the Blogger API
- Create OAuth 2.0 credentials
- Enter your Blog ID, Client ID, and Client Secret

## Insertable Tools

The editor includes several useful tools for creating engaging blog posts:

- **Copyable Code Blocks**: Add syntax-highlighted code with one-click copy functionality
- **Info Boxes**: Create tip, warning, error, and note boxes
- **Collapsible Sections**: Add expandable content sections
- **Tables**: Insert responsive HTML tables
- **Progress Bars**: Visual progress indicators
- **Image Galleries**: Responsive image layouts

## Tag Management

- **Smart Autocomplete**: Tags and categories suggest from previously used ones
- **Usage Tracking**: See which tags are used most frequently
- **Bulk Import**: Add multiple tags/categories at once
- **Auto-addition**: New tags used in posts are automatically added to available tags

## Docker Development

Create a `Dockerfile`:
```dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "app.py"]
```

Build and run:
```bash
docker build -t blog-publisher .
docker run -p 5000:5000 -v $(pwd):/app blog-publisher
```

## Database

The application uses SQLite for local storage with the following tables:
- `post` - Blog posts and metadata
- `setting` - Application configuration
- `available_tag` - Tag management with usage tracking
- `available_category` - Category management with usage tracking

## API Endpoints

- `GET /` - Main dashboard
- `GET /new_post` - Create new post
- `GET /edit_post/<id>` - Edit existing post
- `POST /save_post` - Save post as draft
- `POST /publish_post` - Publish post to blog platform
- `GET /manage_tags` - Tag and category management
- `GET /api/tags` - Get all available tags (JSON)
- `GET /api/categories` - Get all available categories (JSON)

## Security Notes

- Change the default `SECRET_KEY` in production
- For WordPress: Consider using Application Passwords instead of regular passwords
- For Blogger: Store OAuth credentials securely
- The SQLite database contains your posts and settings - backup regularly

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## License

MIT License - feel free to use this for personal or commercial projects.

## Troubleshooting

**Common Issues:**

1. **Import errors**: Make sure all requirements are installed with `pip install -r requirements.txt`

2. **Database errors**: Delete the `.db` file and restart the app to recreate the database

3. **WordPress 401 errors**: Check your credentials and ensure REST API is enabled

4. **Blogger API errors**: Verify your OAuth credentials and Blog ID

**Getting Help:**
- Check the [Issues](https://github.com/carolynboyle/blog-publisher/issues) page
- Create a new issue with details about your problem
- Include error messages and your environment details